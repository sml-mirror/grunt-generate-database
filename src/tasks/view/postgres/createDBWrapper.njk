/*Codegen*/
// tslint:disable
/* eslint-disable */
import {createConnection, Connection, getManager, EntityManager} from 'typeorm';
import { PostgresConnectionOptions } from 'typeorm/driver/postgres/PostgresConnectionOptions';

{%for table in declaration.schemas[index].tables%}
import { {{table.modelName}} } from '{{table.pathToModel}}';
{%if table.historyPath%}
import { h{{table.modelName}} } from '{{table.historyPath}}';
{% endif %}
{% endfor %}
import { create{{declaration.name}}TriggerFuncs{{declaration.schemas[index].namespace}} } from './function';
import { create{{declaration.name}}Triggers{{declaration.schemas[index].namespace}} } from './trigger';

export class {{declaration.schemas[index].namespace}}DBWrapper {

    private static connection: Connection;

    public static async initialize(dropSchema?: boolean, sync?: boolean, extra?: Partial<PostgresConnectionOptions>): Promise<void> {
        await this.close();

        if (! dropSchema) {
            dropSchema = false;
        }
        if (! sync) {
            sync = false;
        }

        this.connection = await this.createTables(dropSchema, sync, extra);
        if (dropSchema) {
            await create{{declaration.name}}TriggerFuncs{{declaration.schemas[index].namespace}}();
            await create{{declaration.name}}Triggers{{declaration.schemas[index].namespace}}();
        }
    }

    private static async createTables(dropSchema?: boolean, sync?: boolean, extra?: Partial<PostgresConnectionOptions>) {
        const baseOptions: PostgresConnectionOptions = {
            name: '{{declaration.schemas[index].namespace}}',
            type: 'postgres',
            replication: {
                master: {
                    host:  process.env.{{declaration.dbhost}},
                    port: parseInt(process.env.{{declaration.dbport}}, 10),
                    username:  process.env.{{declaration.dbusername}},
                    password: process.env.{{declaration.dbpassword}},
                    database: process.env.{{declaration.dbdatabase}}
                },
                slaves: []
            },
            entities: [{% for table in declaration.schemas[index].tables %}{{table.modelName}},{% if table.historyPath%} h{{table.modelName}},{% endif %}{%endfor%}],
            schema: '{{declaration.schemas[index].namespace}}',
            synchronize: sync,
            dropSchema: dropSchema
        }

        const optionsToConnect = {...(extra || {}), ...baseOptions};
        return await createConnection(optionsToConnect);
    }
    public static getEntityManager (): EntityManager {
        return getManager('{{declaration.schemas[index].namespace}}');
    }

    public static async close(): Promise<void> {
        if (this.connection) {
            await this.connection.close();
            this.connection = null;
        }
    }
}
